# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestTestTotals():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
    self.untested_values = list("A234567891JQK")
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def subStoreCurrentValues(self):
    print("\"Storing Current Values\"")
    self.vars["curDealerHand"] = self.driver.find_element(By.ID, "dealer-hand").text
    self.vars["curDealerTotal"] = self.driver.find_element(By.ID, "dealer-total").text
    self.vars["curPlayerHand"] = self.driver.find_element(By.ID, "player-hand").text
    self.vars["curPlayerTotal"] = self.driver.find_element(By.ID, "player-total").text
    print("Dealer: " + self.vars["curDealerHand"] + " = " + self.vars["curDealerTotal"] + "; Player: " + self.vars["curPlayerHand"] + " = " + self.vars["curPlayerTotal"])
  
  def calcHandTotal(self, hand):
    total = 0
    num_aces = 0
    for card in hand:
        # Add Card Value to Total
        if card.isdigit() and int(card) >= 2 and int(card) <= 9:
            total += int(card)
        elif card in ['1', 'J', 'Q', 'K']:
            total += 10
        elif card == 'A':
            total += 11
            num_aces += 1
        else:
            pass
            
        # Mark Card Value as Tested
        if card in self.untested_values:
            self.untested_values.remove(card)
    
    # Adjust value for aces if necessary    
    while num_aces > 0 and total > 21:
        total -= 10
        num_aces -= 1
    return total
  
  def test_testTotals(self):
    # Test name: Test Totals
    # This test verifies that the total value of the hands is calculated correctly.
    
    # Open the page under test, then click the "Deal" button
    self.driver.get("https://youknowandy.github.io/Casino/")

    while len(self.untested_values) > 0:
        #Click "Deal" button
        WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable((By.ID, "deal-button")))
        self.driver.find_element(By.ID, "deal-button").click()

        # Repeat until player busts
        display_player_total = 0
        while display_player_total <= 21:
          # Click Hit button
          WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable((By.ID, "hit-button")))
          self.driver.find_element(By.ID, "hit-button").click()
          
          # Get the player totals and verify that they are correct
          self.subStoreCurrentValues()
          actual_player_total = self.calcHandTotal(self.vars["curPlayerHand"])
          display_player_total = int(self.vars["curPlayerTotal"])
          print("Displayed Player Total = " + str(display_player_total) + "; Actual Value = " + str(actual_player_total))
          assert display_player_total == actual_player_total
          
        # Display untested characters
        print("Untested face values = " + str(self.untested_values))
    