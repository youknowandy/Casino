# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

"""
This test verifies the functionality of the Hit button of a Black Jack playing web site I created that uses Java Script and HTML.
It first adds $100 to the available funds (press Add Funds button, enter $100 at the prompt, and click OK to close)
It then sets the current bet to $1 (press Change Bet button, enter $1 at the prompt, and click OK to close).
It then presses the Deal button, which will cause the web page to deal cards to the dealer and player one at a time.
It then chooses to Hit once dealing has finished (wait until the Hit button is enabled and the presses it)
It then reads the hands and totals of both the dealer and player from the web page and prints out the output.  
It then checks to see if the player busted (total > 21).  
If so, it verifies that the Hit, Stand, and Double Down buttons are no longer selectable and that the Deal button is again.
If not, it verifies that Hit and Stand buttons are selectable again, but the Double Down button is not
It will continue dealing cards and checking the reasults in this manner until the player has busted. 
If by this point the player has busted after every draw, it starts the test over again starting with pressing the Deal button until pressing Deal does not result in a bust to ensure that scenario is tested.
Finally, it prompts the tester to hit enter to shutdown the browser and exit the test.

This test was originally exported from a Selenium IDE project.
The quality of exports from Selenium IDE is generally pretty poor, so the file was updated to correct for mistakes the export process produces.
The web page this was testing was later updated to add banking and betting capability since the test was exported.
This test was manually updated to ensure that the player first adds funds and selects a bet amount before they can deal.
Lastly, the exported version tends to be clumsy looking and inefficient. It was tweaked to look more human-generated.
The original Selenium IDE project tested other buttons as well as the Deal button.
I had created a more complicated test than what could easily be accomplished using Selenium IDE which verified that the web page calculated the hand value totals correctly. At one point it worked, but doesn't currently work. I have not tried to debug it.

"""


class TestTestHit():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.curDealerHand = ""
    self.curDealerTotal = 0
    self.curPlayerHand = ""
    self.curPlayerTotal = 0
    self.testedSafe = False
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def subSetupGame(self):
    #self.driver.get("https://youknowandy.github.io/Casino/")
    self.driver.set_window_size(1012, 680)
    
    # Click Add Funds button and then enter the amount at the prompt
    self.driver.find_element(By.ID, "addfunds-button").click()
    alert = WebDriverWait(self.driver, 5).until(expected_conditions.alert_is_present())
    assert alert.text == "Enter amount to add to funds:"
    alert.send_keys("100")
    alert.accept()    
    
    # Click Change Bet and then enter the amount at the prompt
    self.driver.find_element(By.ID, "changebet-button").click()
    alert = WebDriverWait(self.driver, 5).until(expected_conditions.alert_is_present())
    assert alert.text == "Enter amount to bet:"
    alert.send_keys("1")
    alert.accept()   

    # Wait until ready to ready to deal
    WebDriverWait(self.driver, 5).until(expected_conditions.element_to_be_clickable((By.ID, "deal-button")))
  
  def subStoreCurrentValues(self):
    self.curDealerHand = self.driver.find_element(By.ID, "dealer-hand").text
    self.curDealerTotal = self.driver.find_element(By.ID, "dealer-total").text
    self.curPlayerHand = self.driver.find_element(By.ID, "player-hand").text
    self.curPlayerTotal = self.driver.find_element(By.ID, "player-total").text
    print("Dealer: " + self.curDealerHand + " = " + self.curDealerTotal + "; Player: " + self.curPlayerHand + " = " + self.curPlayerTotal)
  
  def test_testHit(self):
    # This test verifies the behavior of the Hit button
    self.driver.get("https://youknowandy.github.io/Casino/")
    
    # Add funds and select bet
    self.subSetupGame()
    
    # Continue testing Hit button until a safe scenario is tested (non-bust)
    self.testedSafe = self.driver.execute_script("return false")
    condition = True
    while condition:
      self.driver.find_element(By.ID, "deal-button").click()
      # Keep pressing Hit until the player total is above 21
      condition = True
      while condition:
        WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable((By.ID, "hit-button")))
        self.driver.find_element(By.ID, "hit-button").click()
        self.subStoreCurrentValues()
        # Test Safe (non-bust) Scenario
        if int(self.curPlayerTotal) <= 21:
          WebDriverWait(self.driver, 10).until_not(expected_conditions.element_to_be_clickable((By.ID, "doubledown-button")))
          WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable((By.ID, "hit-button")))
          WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable((By.ID, "stand-button")))
          element = self.driver.find_element(By.ID, "deal-button")
          assert element.is_enabled() is False
          self.testedSafe = self.driver.execute_script("return 1==1")
        condition = int(self.curPlayerTotal) <= 21
      # Test Bust Scenario
      WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable((By.ID, "deal-button")))
      WebDriverWait(self.driver, 10).until_not(expected_conditions.element_to_be_clickable((By.ID, "hit-button")))
      WebDriverWait(self.driver, 10).until_not(expected_conditions.element_to_be_clickable((By.ID, "stand-button")))
      WebDriverWait(self.driver, 10).until_not(expected_conditions.element_to_be_clickable((By.ID, "doubledown-button")))
      condition = self.testedSafe == False
      
    input("Test complete. Press Enter to close browser and exit test...")
  
